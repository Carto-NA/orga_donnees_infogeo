# Gestion des listes de domaines

00 - Environnement de travail et variables

01 - [Générique](### 01- Générique)
    * Liste "géometrie pertinence"
    * Liste "type de géométrie"
    
## 00 - Environnement de travail et variables

### On déclare les libairies

# Import des librairies
import arcpy, datetime, os, pandas as pd
from arcpy import env

# On demande de saisir l'environnement de travail (prod ou preprod)
environnement_travail = input("Saisir l'environnement de travail (prod ou preprod): ")

# On test et on déclare la variable
if environnement_travail == "preprod":
    conn = "conn_preprod/preprod_metier.sde"
elif environnement_travail == "prod":
    conn = "conn_prod/prod_metier.sde"
    
# Dossier du projet
projet = r"Modele_AdminDonnees/"

# Espace de travail
arcpy.env.workspace = r"i:/ArcGIS/Projects/" + projet + conn

### 01- Générique

#### Liste "géométrie pertinence"

# Set local parameters
domName = "lt_geometrie_pertinence"
domDesc = "Liste des pertinences de la géométrie"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Autres":"Autres", "France": "France", "Région": "Région", "Département": "Département", "Territoire de contractualisation": "Territoire de contractualisation", "EPCI": "EPCI", "Commune": "Commune", "Lieu-dit": "Lieu-dit", "Rue": "Rue", "Numéro (à la plaque)": "Numéro (à la plaque)"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
    
#### Liste "type de géométrie"

# Set local parameters
domName = "lt_type_geometrie"
domDesc = "Liste des types de géométrie"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"":"", "": "", "": "", "": "", "": "", "": ""}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    

#### Liste "Oui/Non"

# Set local parameters
domName = "lt_oui_non"
domDesc = "Liste Oui/Non"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"oui":"Oui", "non": "Non"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    

#### Liste de "civilité" d'une personne

# Set local parameters
domName = "lt_civilite"
domDesc = "Liste des civilités des personnes"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"M":"Monsieur", "Mme": "Madame"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])


#### Liste de "genre" d'une personne

# Set local parameters
domName = "lt_genre"
domDesc = "Liste des genres des personnes"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"H":"Homme", "F": "Femme"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
    
#### Liste "secteur économique"

# Set local parameters
domName = "lt_secteur_eco"
domDesc = "Liste des secteurs économiques (privé, public)"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Privé":"Privé", "Public": "Public"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
    
### Environnement

#### Résponsabilité Sociétale des Organisation (RSO)

#### Liste "label"

# Set local parameters
domName = "lt_env_rso_label"
domDesc = "Liste des labels"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Engagé RSE":"Engagé RSE ", "Engagé RSO": "Engagé RSO", "Lucie": "Lucie"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    

#### PCAET

#### Liste "statut"

# Set local parameters
domName = "lt_env_pcaet_statut"
domDesc = "Liste des statuts"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Obligé":"Obligé", "Volontaire": "Volontaire"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
#### Liste "étape"

# Set local parameters
domName = "lt_env_pcaet_etape"
domDesc = "Liste des étapes"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"0 pas démarré / abandon":"0 pas démarré / abandon",
           "1 délibération": "1 délibération",
          "2 diagnostic réalisé":"2 diagnostic réalisé",
          "3 stratégie réalisée":"3 stratégie réalisée",
          "4 plan d'action":"4 plan d'action",
          "5 consultation / approbation":"5 consultation / approbation"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
#### PTRE

##### Liste "type de structure"

# Set local parameters
domName = "lt_env_ptre_type"
domDesc = "Liste des types de structure"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Plateforme":"Plateforme",
          "Plateforme en devenir":"Plateforme en devenir"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
### Lycée

##### Liste "Secteur de l'établissement"

# Set local parameters
domName = "lt_lyc_etab_secteur"
domDesc = "Liste des secteurs d'établissement"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Privé":"Privé", "Public": "Public"}


#### Liste "Enseignement de l'établissement"

# Set local parameters
domName = "lt_lyc_etab_enseignement"
domDesc = "Liste des enseignements au sein de l'établissement"


# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"NR": "Non renseigné",
           "Général et technologique": "Général et technologique", 
           "Polyvalent": "Polyvalent", 
           "Professionnel": "Professionnel"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])


#### Liste "Catégorie de l'établissement"

# Set local parameters
domName = "lt_lyc_etab_categorie"
domDesc = "Liste des catégories d'établissement"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Lycée":"Lycée", 
           "MFR": "MFR", 
           "SITE": "SITE", 
           "MICRO-LYCEE": "MICRO-LYCEE"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
    
#### Liste "Académie"

# Set local parameters
domName = "lt_lyc_academie"
domDesc = "Liste des catégories d'établissement"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Bordeaux": "Bordeaux", 
           "Limoges": "Limoges", 
           "Poitiers":"Poitiers"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])  
    
   
#### Liste "Ministère de rattachement"

# Set local parameters
domName = "lt_lyc_ministere"
domDesc = "Liste des catégories d'établissement"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Agriculture": "Agriculture", 
           "Education nationale": "Education nationale", 
           "MER": "Mer" 
          }

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
   
#### Liste "Nature établissement"

# Set local parameters
domName = "lt_lyc_etab_nature"
domDesc = "Liste des natures d'établissement"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"NR": "Non renseigné",
           "ETABLISSEMENT REGIONAL D'ENSEIGNT ADAPTE": "Etablissement régional d'ens. adapté", 
           "LYCEE PROFESSIONNEL":"Lycée professionnel", 
           "LYCEE D ENSEIGNEMENT GENERAL": "Lycée d'ens. général", 
           "LYCEE ENSEIGNT GENERAL ET TECHNOLOGIQUE" : "Lycée d'ens. général et technologique", 
           "LYCEE D ENSEIGNEMENT TECHNOLOGIQUE": "Lycée d'ens. technologique", 
           "LYCEE ENS GENERAL TECHNO PROF AGRICOLE": "Lycée d'ens. général techno. prof. agricole",  
           "LYCEE POLYVALENT": "Lycée polyvalent", 
           "MAISON FAMILIALE RURALE": "Maison familiale et rurale"
          }

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])


#### Liste "Sigle de la nature d'établissement"

# Set local parameters
domName = "lt_lyc_etab_sigle_nature"
domDesc = "Liste des natures d'établissement"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"NR": "Non renseigné",
           "EREA": "EREA", 
           "ISNAB": "ISNAB",
           "LEGTA": "LEGTA", 
           "LEGTPA": "LEGTPA",
           "LAP": "LAP", 
           "LARP": "LARP", 
           "LEAP": "LEAP", 
           "LG": "LG", 
           "LGT" : "LGT",
           "LP": "LP",
           "LPA": "LPA", 
           "LPO": "LPO", 
           "LT": "LT",
           "MICRO-LYCEE": "MICRO-LYCEE",
           "MFR": "MFR", 
           "MFREO": "MFREO",
           "SITE": "SITE"
          }

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    

#### Liste "Type d'hébergement"

# Set local parameters
domName = "lt_lyc_type_hebergement"
domDesc = "Liste des types d'hébergement"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"NC": "Non communiqué",
           "11 : Sans internat ni demi pension": "11 : Sans internat ni demi pension",
           "12 : Sans internat avec demi pension": "12 : Sans internat avec demi pension",
           "21 : Avec internat sans demi pension": "21 : Avec internat sans demi pension",
           "22 : Avec internat et demi pension": "22 : Avec internat et demi pension",
           "99 : Sans Objet": "99 : Sans objet"
          }

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
 
#### Liste "Catégorie financière de l'établissement"
 
# Set local parameters
domName = "lt_lyc_categorie_financiere"
domDesc = "Liste des catégorie financière"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"NC": "Non communiqué",
           "1 : Catégorie financière 1": "1 : Catégorie financière 1",
           "2 : Catégorie financière 2": "2 : Catégorie financière 2",
           "3 : Catégorie financière 1": "3 : Catégorie financière 3",
           "4 : Catégorie financière 1": "4 : Catégorie financière 4",
           "5 : Catégorie financière 1": "5 : Catégorie financière 5",
           "9 : Sans objet": "9 : Sans objet",
           "X : Non classé": "X : Non classé"
          }

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
    
#### Liste "Statut - élu référent"    

# Set local parameters
domName = "lt_lyc_statut_elu_referent"
domDesc = "Liste des statuts d'élu référent"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"NR": "Non renseigné",
           "Titulaire": "Titulaire",
           "Suppléant": "Suppléant"
          }

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    

### Territoire

#### Liste "AMI type diagnostique"

# Set local parameters
domName = "lt_ter_ami_type_diag"
domDesc = "Liste des types de diagnostique AMI"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"A minima":"A minima", "Intermédiaire" : "Intermédiaire", "A maxima": "A maxima"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    
    
#### Liste "AMI avancement"

# Set local parameters
domName = "lt_ter_ami_avance"
domDesc = "Liste d'avancement AMI'"

# Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"approuvé":"approuvé", "pas de sollicitation" : "pas de sollicitation"}

# Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    

#### Liste "AMI typologie du contrat"

# Set local parameters
domName = "lt_ter_ami_typo_contrat"
domDesc = "Liste de typologie des contrats'"

##Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"Contrat d'attractivité":"Contrat d'attractivité", "Contrat de dynamisation et de cohésion" : "Contrat de dynamisation et de cohésion", "Contrat de solidarité et d'attractivité" : "Contrat de solidarité et d'attractivité", "Contrat de développement et de transition" : "Contrat de développement et de transition"}

##Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
    

#### AFR

# Set local parameters
domName = "lt_ter_afr_eligible"
domDesc = "Liste d'éligible au zonage AFR'"

##Process: Create the coded value domain
arcpy.CreateDomain_management(arcpy.env.workspace, domName, domDesc, 
                              "TEXT", "CODED")

# Store all the domain values in a dictionary with the domain code as the "key" 
# and the domain description as the "value" (domDict[code])
domDict = {"entièrement":"entièrement", "partiellement" : "partiellement"}

##Process: Add valid material types to the domain
# use a for loop to cycle through all the domain codes in the dictionary
for code in domDict:        
    arcpy.AddCodedValueToDomain_management(arcpy.env.workspace, domName, code, domDict[code])
